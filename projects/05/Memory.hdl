// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //     14|13, 12
    //
    // 16k : 00 0 0000 0000 0000)
    //     : 01 1 1111 1111 1111)
    // 8k  : 10 0 0000 0000 0000)
    //     : 10 1 0000 0000 0000)
    // 1   : 11 0 0000 0000 0000)

    // 9999: 00 1 0011 1000 01111

    // Load dmux

    Not(in=address[14], out=is-data);

    Not(in=address[13], out=is-screen-tmp);
    And(a=address[14], b=is-screen-tmp, out=is-screen);

    And(a=address[13], b=address[14], out=is-keyboard);

    And(a=is-data, b=load, out=load-data);
    And(a=is-screen, b=load, out=load-screen);
    And(a=is-keyboard, b=load, out=load-keyboard);

    // Data memory

    RAM16K(in=in, load=load-data, address=address[0..13], out=out-data);

    // Screen memory

    Not(in=address[12], out=load-screen-0);

    RAM4K(in=in, load=load-screen-0, address=address[0..11], out=out-screen-0);
    RAM4K(in=in, load=address[12], address=address[0..11], out=out-screen-1);

    Mux16(a=out-screen-0, b=out-screen-1, sel=load-screen-0, out=out-screen);

    // Keyboard memory

    Register(in=in, load=load-keyboard, out=out-keyboard);

    // Output

    Mux4Way16(a=out-data, b=out-data, c=out-screen, d=out-keyboard, sel=address[13..14], out=out);

}